import os, shutil, datetime
import Version

def generateDefaultTheme(dir) :
  sourceDir = dir.abspath
  result = "<!-- WARNING: This file is automatically generated. Any changes will be overwritten. -->\n"
  result += "<RCC version =\"1.0\">"
  result += "<qresource prefix=\"/themes/Default\">"
  for (path, dirs, files) in os.walk(sourceDir) :
    for file in files :
      filePath = os.path.join(path,file)
      result += "<file alias=\"%(alias)s\">%(path)s</file>" % { 
          "alias": filePath[len(sourceDir)+1:],
          "path": filePath
        }
  result += "</qresource>"
  result += "</RCC>"
  return result

Import("env")

myenv = env.Clone()
myenv["CXXFLAGS"] = filter(lambda x : x != "-Wfloat-equal", myenv["CXXFLAGS"])
myenv.MergeFlags(env["SWIFT_CONTROLLERS_FLAGS"])
myenv.MergeFlags(env["SWIFTOOLS_FLAGS"])
if myenv["HAVE_XSS"] :
  myenv.MergeFlags(env["XSS_FLAGS"])
if myenv["HAVE_SPARKLE"] :
  myenv.MergeFlags(env["SPARKLE_FLAGS"])
myenv.MergeFlags(env["SWIFTEN_FLAGS"])
myenv.MergeFlags(env["LIBIDN_FLAGS"])
myenv.MergeFlags(env["BOOST_FLAGS"])
myenv.MergeFlags(env.get("SQLITE_FLAGS", {}))
myenv.MergeFlags(env["ZLIB_FLAGS"])
myenv.MergeFlags(env["OPENSSL_FLAGS"])
myenv.MergeFlags(env.get("LIBXML_FLAGS", ""))
myenv.MergeFlags(env.get("EXPAT_FLAGS", ""))

myenv.Tool("qt4", toolpath = ["#/BuildTools/SCons/Tools"])
myenv.Tool("nsis", toolpath = ["#/BuildTools/SCons/Tools"])
myenv.EnableQt4Modules(['QtCore', 'QtGui', 'QtWebKit'], debug = False)

myenv.Append(CPPPATH = ["."])

if env["PLATFORM"] == "win32" :
  #myenv["LINKFLAGS"] = ["/SUBSYSTEM:CONSOLE"]
  myenv.Append(LINKFLAGS = ["/SUBSYSTEM:WINDOWS"])
  myenv.Append(LIBS = "qtmain")

myenv.WriteVal("DefaultTheme.qrc", myenv.Value(generateDefaultTheme(myenv.Dir("../resources/themes/Default"))))

sources = [
    "main.cpp",
    "QtAboutWidget.cpp",
    "QtAddContactDialog.cpp",
    "QtChatWindow.cpp",
    "QtChatWindowFactory.cpp",
    "QtLoginWindow.cpp",
    "QtLoginWindowFactory.cpp",
    "QtMainWindow.cpp",
    "QtMainWindowFactory.cpp",
    "QtSettingsProvider.cpp",
    "QtStatusWidget.cpp",
    "QtSwift.cpp",
    "QtChatView.cpp",
    "QtChatTabs.cpp",
    "QtSoundPlayer.cpp",
    "QtSystemTray.cpp",
    "QtTabbable.cpp",
    "QtTabWidget.cpp",
    "QtTextEdit.cpp",
    "QtXMLConsoleWidgetFactory.cpp",
    "QtXMLConsoleWidget.cpp",
    "QtUtilities.cpp",
    "QtBookmarkDetailWindow.cpp",
    "QtAddBookmarkWindow.cpp",
    "QtEditBookmarkWindow.cpp",
    "ChatSnippet.cpp",
    "MessageSnippet.cpp",
    "SystemMessageSnippet.cpp",
    "QtElidingLabel.cpp",
    "QtLineEdit.cpp",
    "Roster/RosterModel.cpp",
    "Roster/QtTreeWidget.cpp",
#    "Roster/QtTreeWidgetItem.cpp",
    "Roster/RosterDelegate.cpp",
    "Roster/GroupItemDelegate.cpp",
    "Roster/DelegateCommons.cpp",
    "EventViewer/EventModel.cpp",
    "EventViewer/EventDelegate.cpp",
    "EventViewer/TwoLineDelegate.cpp",
    "EventViewer/QtEventWindowFactory.cpp",
    "EventViewer/QtEventWindow.cpp",
    "EventViewer/QtEvent.cpp",
    "ChatList/QtChatListWindow.cpp",
    "ChatList/QtChatListWindowFactory.cpp",
    "ChatList/ChatListModel.cpp",
    "ChatList/ChatListDelegate.cpp",
    "ChatList/ChatListMUCItem.cpp",
    "MUCSearch/QtMUCSearchWindow.cpp",
    "MUCSearch/MUCSearchModel.cpp",
    "MUCSearch/MUCSearchRoomItem.cpp",
    "MUCSearch/MUCSearchDelegate.cpp",
    "ContextMenus/QtRosterContextMenu.cpp",
    "ContextMenus/QtContextMenu.cpp",
    "QtSubscriptionRequestWindow.cpp",
    "QtRosterHeader.cpp",
    "QtWebView.cpp",
    "qrc_DefaultTheme.cc",
    "qrc_Swift.cc",
  ]

myenv["SWIFT_VERSION"] = Version.getBuildVersion("swift")

if env["PLATFORM"] == "win32" :
  myenv.RES("../resources/Windows/Swift.rc")
  sources += ["../resources/Windows/Swift.res"]

if env["PLATFORM"] == "darwin" or env["PLATFORM"] == "win32" :
  swiftProgram = myenv.Program("Swift", sources)
else :
  swiftProgram = myenv.Program("swift", sources)

myenv.Uic4("MUCSearch/QtMUCSearchWindow.ui")
myenv.Uic4("QtAddContactDialog.ui")
myenv.Uic4("QtBookmarkDetailWindow.ui")
myenv.Qrc("DefaultTheme.qrc")
myenv.Qrc("Swift.qrc")

if env["PLATFORM"] == "darwin" :
  frameworks = []
  if env["HAVE_SPARKLE"] :
    frameworks.append(env["SPARKLE_FRAMEWORK"])
  app = myenv.AppBundle("Swift", version = myenv["SWIFT_VERSION"], resources = ["../resources/MacOSX/Swift.icns"], frameworks = frameworks)
  if env["DIST"] :
    myenv.Command(["Swift-${SWIFT_VERSION}.dmg"], [app], [
        "$QTDIR/bin/macdeployqt $SOURCE -dmg",
        Move("$TARGET", "$SOURCE.dir/Swift.dmg")
      ])

if env.get("SWIFT_INSTALLDIR", "") :
  env.Install(os.path.join(env["SWIFT_INSTALLDIR"], "bin"), swiftProgram)
  env.InstallAs(os.path.join(env["SWIFT_INSTALLDIR"], "share", "pixmaps", "swift.xpm"), "../resources/logo/logo-icon-32.xpm")
  env.Install(os.path.join(env["SWIFT_INSTALLDIR"], "share", "applications"), "../resources/swift.desktop")

if env["PLATFORM"] == "win32" :
  if env["DIST"] :
    myenv.WindowsBundle("Swift", resources = [
        os.path.join(env["OPENSSL_DIR"], "bin", "ssleay32.dll"),  
        os.path.join(env["OPENSSL_DIR"], "bin", "libeay32.dll"),  
      ],  
      qtimageformats = ["gif", "ico", "jpeg", "mng", "svg", "tiff"],
      qtlibs = ["QtCore4", "QtGui4", "QtNetwork4", "QtWebKit4", "QtXMLPatterns4", "phonon4"])

    myenv.Append(NSIS_OPTIONS = [
        "/DmsvccRedistributableDir=\"" + env["vcredist"] + "\"", 
        "/DbuildVersion=" + myenv["SWIFT_VERSION"]
      ])
    myenv.Nsis("../Packaging/nsis/swift.nsi")
