Import("swiften_env")

myenv = swiften_env.Clone()
myenv.MergeFlags(myenv["LIBIDN_FLAGS"])
if myenv.get("HAVE_CARES", False) :
   myenv.MergeFlags(myenv.get("CARES_FLAGS", {}))

sourceList = [
			"HTTPConnectProxiedConnection.cpp",
			"HTTPConnectProxiedConnectionFactory.cpp",
			"SOCKS5ProxiedConnection.cpp",
			"SOCKS5ProxiedConnectionFactory.cpp",
			"BoostConnection.cpp",
			"BoostConnectionFactory.cpp",
			"BoostConnectionServer.cpp",
			"BoostIOServiceThread.cpp",
			"ConnectionFactory.cpp",
			"ConnectionServer.cpp",
			"DummyConnection.cpp",
			"FakeConnection.cpp",
 			"ChainedConnector.cpp",
 			"Connector.cpp",
			"TimerFactory.cpp",
			"DummyTimerFactory.cpp",
			"BoostTimerFactory.cpp",
			"DomainNameResolver.cpp",
			"DomainNameAddressQuery.cpp",
			"DomainNameServiceQuery.cpp",
			"PlatformDomainNameResolver.cpp",
			"PlatformDomainNameServiceQuery.cpp",
			"PlatformDomainNameAddressQuery.cpp",
			"StaticDomainNameResolver.cpp",
			"HostAddress.cpp",
			"HostAddressPort.cpp",
			"NetworkFactories.cpp",
			"BoostNetworkFactories.cpp",
			"Timer.cpp",
			"BoostTimer.cpp",
			"ProxyProvider.cpp"
	]

if myenv.get("HAVE_CARES", False) :
   sourceList.append("CAresDomainNameResolver.cpp")
		
if myenv["PLATFORM"] == "darwin" :
	myenv.Append(FRAMEWORKS = ["CoreServices", "SystemConfiguration"])
	sourceList += [ "MacOSXProxyProvider.cpp" ]
elif myenv["PLATFORM"] == "win32" :
	sourceList += [ "WindowsProxyProvider.cpp" ]
else :
	sourceList += [ "UnixProxyProvider.cpp" ]
	sourceList += [ "EnvironmentProxyProvider.cpp" ]
	if myenv.get("HAVE_GCONF", 0) :
		myenv.Append(CPPDEFINES = "HAVE_GCONF")
		myenv.MergeFlags(myenv["GCONF_FLAGS"])
		sourceList += [ "GConfProxyProvider.cpp" ]

objects = myenv.SwiftenObject(sourceList)
swiften_env.Append(SWIFTEN_OBJECTS = [objects])
